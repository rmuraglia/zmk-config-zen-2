#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
  chosen {
    zmk,matrix_transform = &five_column_transform;
  };
};

// define layers
#define _DEFAULT 0
#define _KEBAB 1
#define _SNAKE 2
#define _CAMEL 3
#define _CAPS 4
#define _SKEBAB 5
#define _SSNAKE 6
#define _LOWER 7
#define _RAISE 8
#define _STICKY 9

// configure hold tap settings
&lt {
    flavor = "hold-preferred";
};

&mt {
    tapping-term-ms = <150>;  // slightly faster to reduce wait before cmd click
};

&sl {
    release-after-ms = <500>;  // basically leader timeout equivalent
};

// new behaviors for shift tap and mod on alphas
// lmt: https://zmk.dev/docs/behaviors/hold-tap#example-use-cases based on toggle on tap, momentary on hold layers
/ {
    behaviors {
        st: shift_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <120>;
            bindings = <&kp>, <&kp>;
        };
        am: alpha_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "ALPHA_MOD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            bindings = <&kp>, <&kp>;
            retro-tap;
        };
        lmt: layer_mo_to {
            compatible = "zmk,behavior-hold-tap";
            label = "l_mo_to";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&to>;
        };
    };
};

// Combos

#define COMBO_TERM 25

/* Key index
 0  1  2  3  4         5  6  7  8  9
10 11 12 13 14        15 16 17 18 19
20 21 22 23 24        25 26 27 28 29
        30 31 32    33 34 35         */

/ {
    combos {
        compatible = "zmk,combos";
        combo_leader {
            timeout-ms = <COMBO_TERM>;
            key-positions = <0 1>;
            bindings = <&sl _STICKY>;
        };
        combo_grave {
            timeout-ms = <COMBO_TERM>;
            key-positions = <1 2>;
            bindings = <&kp GRAVE>;
        };
        combo_tilde {
            timeout-ms = <COMBO_TERM>;
            key-positions = <2 3>;
            bindings = <&kp TILDE>;
        };
        combo_lbrc {
            timeout-ms = <COMBO_TERM>;
            key-positions = <10 11>;
            bindings = <&kp LBRC>;
        };
        combo_lbkt {
            timeout-ms = <COMBO_TERM>;
            key-positions = <11 12>;
            bindings = <&kp LBKT>;
        };
        combo_lpar {
            timeout-ms = <COMBO_TERM>;
            key-positions = <12 13>;
            bindings = <&kp LPAR>;
        };
        combo_lt {
            timeout-ms = <COMBO_TERM>;
            key-positions = <13 14>;
            bindings = <&kp LESS_THAN>;
        };
        combo_rbrc {
            timeout-ms = <COMBO_TERM>;
            key-positions = <20 21>;
            bindings = <&kp RBRC>;
        };
        combo_rbkt {
            timeout-ms = <COMBO_TERM>;
            key-positions = <21 22>;
            bindings = <&kp RBKT>;
        };
        combo_rpar {
            timeout-ms = <COMBO_TERM>;
            key-positions = <22 23>;
            bindings = <&kp RPAR>;
        };
        combo_gt {
            timeout-ms = <COMBO_TERM>;
            key-positions = <23 24>;
            bindings = <&kp GREATER_THAN>;
        };

        combo_equal {
            timeout-ms = <COMBO_TERM>;
            key-positions = <6 7>;
            bindings = <&kp EQUAL>;
        };
        combo_plus {
            timeout-ms = <COMBO_TERM>;
            key-positions = <7 8>;
            bindings = <&kp PLUS>;
        };
        combo_semi {
            timeout-ms = <COMBO_TERM>;
            key-positions = <8 9>;
            bindings = <&kp SEMI>;
        };
        combo_minus {
            timeout-ms = <COMBO_TERM>;
            key-positions = <16 17>;
            bindings = <&kp MINUS>;
        };
        combo_under {
            timeout-ms = <COMBO_TERM>;
            key-positions = <17 18>;
            bindings = <&kp UNDER>;
        };
        combo_colon {
            timeout-ms = <COMBO_TERM>;
            key-positions = <18 19>;
            bindings = <&kp COLON>;
        };
        combo_bslh {
            timeout-ms = <COMBO_TERM>;
            key-positions = <26 27>;
            bindings = <&kp BSLH>;
        };
        combo_pipe {
            timeout-ms = <COMBO_TERM>;
            key-positions = <27 28>;
            bindings = <&kp PIPE>;
        };
        combo_cmdpal {
            timeout-ms = <COMBO_TERM>;
            key-positions = <28 29>;
            bindings = <&kp LG(LS(P))>;
        };
    };
};

// define frequently used keyboard shortcuts

// OS stuff
#define EXPOSE  LC(UP)      // mission control (aka expose)
#define OS_LOCK LG(LC(Q))   // lock screen
#define SNIP    LG(LS(N4))  // screenshot portion of screen

// text editing: cursor movement, text deletion
#define MWL LA(LEFT)   // move cursor one word left
#define MWR LA(RIGHT)  // move cursor one word right
#define MLL LC(A)      // move cursor to beginning of line
#define MLR LC(E)      // move cursor to end of line
#define DWL LA(BSPC)   // delete one word left
#define DWR LA(DEL)    // delete one word right
#define DLL LC(U)      // delete to beginning of line
#define DLR LC(K)      // delete to end of line

// window management: workspace navigation
#define WK_L LC(LEFT)  // go to workspace left
#define WK_R LC(RIGHT) // go to workspace right

// window management: window snapping
// match default keybinds for rectangle
// TODO: if I really wanted to do this, would need to figure out layer specific combos to prevent overlap with brackets, etc

// deprecated categories (mostly hammerspoon stuff):
    // window management: cursor focus
    // window management: window throwing
    // hammerspoon: alerts, emoji finder

// TODO: diagrams for other layers
/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWERTY";
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  '  |
// |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
//      taps   | ESC | TAB | BSP |   | SPC | ENT  | DEL |
//      holds  | GUI | LWR | SFT |   | SFT | RSE  | GUI |
            bindings = <
    &am LCTRL Q &kp W &kp E &kp R &kp T             &kp Y &kp U  &kp I     &kp O   &kp P    
    &kp A       &kp S &kp D &kp F &kp G             &kp H &kp J  &kp K     &kp L   &kp APOS 
    &am LALT Z  &kp X &kp C &kp V &kp B             &kp N &kp M  &kp COMMA &kp DOT &kp FSLH 
    &mt LGUI ESC &lt _LOWER TAB &st LSHIFT BSPC     &st RSHIFT SPACE &lt _RAISE ENTER &mt RGUI DEL
            >;
        };

        kebab_layer {
            label = "KEBAB";
            bindings = <
   &trans   &trans &trans   &trans   &trans           &trans   &trans &trans   &trans   &trans
   &trans   &trans &trans   &trans   &trans           &trans   &trans &trans   &trans   &trans
   &trans   &trans &trans   &trans   &trans           &trans   &trans &trans   &trans   &trans
                   &trans   &trans   &trans       &kp MINUS   &lmt _RAISE _DEFAULT  &trans
            >;
        };

        snake_layer {
            label = "SNAKE";
            bindings = <
   &trans   &trans &trans   &trans   &trans           &trans   &trans &trans   &trans   &trans
   &trans   &trans &trans   &trans   &trans           &trans   &trans &trans   &trans   &trans
   &trans   &trans &trans   &trans   &trans           &trans   &trans &trans   &trans   &trans
                   &trans   &trans   &trans       &kp UNDER   &lmt _RAISE _DEFAULT  &trans
            >;
        };

        camel_layer {
            label = "CAMEL";
            bindings = <
   &trans   &trans &trans   &trans   &trans           &trans   &trans &trans   &trans   &trans
   &trans   &trans &trans   &trans   &trans           &trans   &trans &trans   &trans   &trans
   &trans   &trans &trans   &trans   &trans           &trans   &trans &trans   &trans   &trans
                   &trans   &trans   &trans       &sk LSHIFT   &lmt _RAISE _DEFAULT  &trans
            >;
        };

        caps_layer {
            label = "CAPS";
            bindings = <
    &kp LS(Q) &kp LS(W) &kp LS(E) &kp LS(R) &kp LS(T)             &kp LS(Y) &kp LS(U)  &kp LS(I)  &kp LS(O)  &kp LS(P)
    &kp LS(A) &kp LS(S) &kp LS(D) &kp LS(F) &kp LS(G)             &kp LS(H) &kp LS(J)  &kp LS(K)  &kp LS(L)  &kp APOS 
    &kp LS(Z) &kp LS(X) &kp LS(C) &kp LS(V) &kp LS(B)             &kp LS(N) &kp LS(M)  &kp COMMA  &kp DOT    &kp FSLH 
                   &trans   &trans   &trans       &trans   &lmt _RAISE _DEFAULT  &trans
            >;
        };

        screaming_kebab_layer {
            label = "SKEBAB";
            bindings = <
    &kp LS(Q) &kp LS(W) &kp LS(E) &kp LS(R) &kp LS(T)             &kp LS(Y) &kp LS(U)  &kp LS(I)  &kp LS(O)  &kp LS(P)
    &kp LS(A) &kp LS(S) &kp LS(D) &kp LS(F) &kp LS(G)             &kp LS(H) &kp LS(J)  &kp LS(K)  &kp LS(L)  &kp APOS 
    &kp LS(Z) &kp LS(X) &kp LS(C) &kp LS(V) &kp LS(B)             &kp LS(N) &kp LS(M)  &kp COMMA  &kp DOT    &kp FSLH 
                   &trans   &trans   &trans       &kp MINUS   &lmt _RAISE _DEFAULT  &trans
            >;
        };

        screaming_snake_layer {
            label = "SSNAKE";
            bindings = <
    &kp LS(Q) &kp LS(W) &kp LS(E) &kp LS(R) &kp LS(T)             &kp LS(Y) &kp LS(U)  &kp LS(I)  &kp LS(O)  &kp LS(P)
    &kp LS(A) &kp LS(S) &kp LS(D) &kp LS(F) &kp LS(G)             &kp LS(H) &kp LS(J)  &kp LS(K)  &kp LS(L)  &kp APOS 
    &kp LS(Z) &kp LS(X) &kp LS(C) &kp LS(V) &kp LS(B)             &kp LS(N) &kp LS(M)  &kp COMMA  &kp DOT    &kp FSLH 
                   &trans   &trans   &trans       &kp UNDER   &lmt _RAISE _DEFAULT  &trans
            >;
        };

        lower_layer {
            label = "SYSNUM";
            bindings = <
   &kp LCTRL  &kp F4   &kp C_VOL_DN  &kp K_MUTE  &kp C_VOL_UP     &kp TAB  &kp N7  &kp N8  &kp N9  &kp PLUS
   &kp LSHIFT &kp LALT &kp WK_L      &kp EXPOSE  &kp WK_R         &kp N0   &kp N4  &kp N5  &kp N6  &kp MINUS 
   &kp LGUI   &none    &kp C_PREV    &kp C_PP    &kp C_NEXT       &kp DOT  &kp N1  &kp N2  &kp N3  &kp FSLH
                                &trans  &trans  &trans                &kp SPACE  &kp ENTER &kp DEL
            >;
        };

        raise_layer {
            label = "EDITOR";
            bindings = <
   &trans   &trans &trans   &trans   &trans      &kp DLL  &kp DWL  &kp DWR &kp DLR   &trans
   &trans   &trans &trans   &trans   &trans      &kp LEFT &kp DOWN &kp UP  &kp RIGHT &trans
   &trans   &trans &trans   &trans   &trans      &kp MLL  &kp MWL  &kp MWR &kp MLR   &trans
                    	     &kp ESC &kp TAB  &kp BSPC   &trans   &trans    &trans
            >;
        };

        sticky_layer {
            label = "LEADER";
            bindings = <
    &kp OS_LOCK  &none     &none  &to _KEBAB  &to _SKEBAB      &none  &none  &none  &none  &bt BT_CLR
    &none        &kp SNIP  &none  &to _CAMEL  &to _CAPS        &bt BT_PRV &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_NXT
    &none        &none     &none  &to _SNAKE  &to _SSNAKE      &none  &none  &none  &none  &none
                                  &none  &none  &none       &none  &none  &none
            >;
        };
    };
};
